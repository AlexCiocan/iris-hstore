buildscript {
	ext {
		springBootVersion = '1.2.0.BUILD-SNAPSHOT'
		springVersion = '3.2.3.RELEASE'
		jstlVersion = '1.1.2'
	}
	repositories{
	
		mavenCentral()
		maven { url "http://repo.spring.io/release" }
		maven { url "http://repo.spring.io/milestone" }
		maven { url "http://repo.spring.io/snapshot" }
		mavenLocal()
	}
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}
apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse-wtp'
apply plugin: 'spring-boot'



war {
    baseName = 'iris-hstore'
    version =  '0.1.0'
}


repositories {

    mavenCentral()
    maven { url "http://repo.spring.io/release" }
	maven { url "http://repo.spring.io/milestone" }
	maven { url "http://repo.spring.io/snapshot" }
	mavenLocal()
    
}

dependencies {
     //providedCompile 'javax.servlet:servlet-api:2.5'

     compile("org.springframework.boot:spring-boot-starter-web") {
        
    }

   
    // tag::actuator[]
    compile("org.springframework.boot:spring-boot-starter-actuator")
	compile 'org.springframework:spring-webmvc:${springVersion}'
//	compile 'org.springframework.boot:spring-boot-starter-web'
	
	runtime 'org.springframework:spring-tx:4.0.6.RELEASE'
	runtime 'commons-dbcp:commons-dbcp:1.2.2'
	runtime 'org.springframework:spring-orm:3.2.3.RELEASE'
	runtime 'org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final'
	runtime 'org.hibernate:hibernate-entitymanager:4.3.5.Final'
	
	runtime 'javax.servlet:jstl:1.1.2'
    
    providedRuntime 'org.apache.tomcat.embed:tomcat-embed-jasper'

	//test dependencies[]::start    
    testCompile("junit:junit")
    testCompile("org.springframework.boot:spring-boot-starter-test")
    //test dependencies[]::end
}

springBoot {
    mainClass="demo.Application"
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.11'
}

/*eclipse.project{
 	natures 'org.springsource.ide.eclipse.gradle.core.nature'
 	natures 'org.eclipse.jst.j2ee.web.WebNature'
 	natures 'org.eclipse.jdt.core.javanature'
 	natures 'org.eclipse.wst.common.modulecore.ModuleCoreNature'
}
*/

//generate eclipse web-project
/*eclipse.wtp {
     facet {
facet name: 'jst.java', version: '1.7' // Java 7
facet name: 'jst.web', version: '3.0' // Servlet 3.0
facet name: 'jpt.jpa', version: '2.1' // JPA 2.1
} 
}
*/
defaultTasks 'clean', 'build'
// other tasks: cleanEclipse eclipseProject eclipse bootRun

//######DEBUG###########//
applicationDefaultJvmArgs = [
    "-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005"
]

eclipse.classpath.downloadJavadoc = true // defaults to 'false'
eclipse.classpath.downloadSources = true

eclipse {
    classpath {
       downloadSources=true
    }
}

eclipse.classpath.file {
    // Classpath entry for Eclipse which changes the order of classpathentries; otherwise no sources for 3rd party jars are shown
    withXml { xml ->
        def node = xml.asNode()
        node.remove( node.find { it.@path == 'org.eclipse.jst.j2ee.internal.web.container' } )
        node.appendNode( 'classpathentry', [ kind: 'con', path: 'org.eclipse.jst.j2ee.internal.web.container', exported: 'true'])
    }
}
